// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String @id @default(uuid())
  username String @unique @default(cuid())
  email    String @unique
  password String

  profile Profile?
  roles   UserRole[] @default([USER])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tokens       Token[]
  appointments Appointment[]

  @@map("users")
}

model Profile {
  id          String  @id @default(uuid())
  displayName String
  bio         String?
  avatar      String?

  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("profiles")
}

model Token {
  id    String @id @default(uuid())
  token String @unique @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  expiresAt DateTime @default(dbgenerated("now() + interval '1 week'"))

  @@map("tokens")
}

model Appointment {
  id String @id @default(uuid())

  appointmentAt DateTime
  fullName      String
  phone         String
  address       String

  userId String
  user   User   @relation(fields: [userId], references: [id])

  businessId String
  business   Business @relation(fields: [businessId], references: [id])

  services Service[]
  payment  Payment?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("appointments")
}

model Business {
  id          String       @id @default(uuid())
  name        String
  type        BusinessType
  district    String
  description String?
  address     String
  phone       String

  services     Service[]
  appointments Appointment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("businesses")
}

model Service {
  id    String @id @default(uuid())
  name  String
  price Float

  businessId String
  business   Business @relation(fields: [businessId], references: [id])

  appointments Appointment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("services")
}

model Payment {
  id            String        @id @default(uuid())
  appointmentId String        @unique
  cardHolder    String
  cardLast4     String
  status        PaymentStatus @default(PENDING)

  appointment Appointment @relation(fields: [appointmentId], references: [id])
  meta        Json

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("payments")
}

enum UserRole {
  USER
  ADMIN
}

enum BusinessType {
  BARBER
  SALON
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}
